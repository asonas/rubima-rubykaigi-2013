! RubyKaigi 2013 レポート

!! 開催概要

:開催日: 2013 年 5 月 30 日 (木) 10:00 〜 2013 年 6 月 1 日 (土) 18:30
:開催場所: 東京国際交流館 プラザ平成
:主催: RubyKaigi 2013 実行委員会
:公式ページ: http://rubykaigi.org/2013
:公式ハッシュタグ: #rubykaigi

!! はじめに

RubyKaigi が 2011 年 7 月に終わってから、2 年弱の充電期間を経て、新たな RubyKaigi として帰ってきました。
これまでの RubyKaigi とは異なる RubyKaigi 2013。準国際カンファレンスとして蘇り、新たな試みが多かったRubyKaigi 2013。
今回のレポートは、そんな RubyKaigi 2013 の様子を一部ではありますが、お伝え出来ればとおもいます。

! May 30

!! The History of Ruby;20th Anniversary Ed. by Masayoshi Takahashi

日本Rubyの会 会長 高橋征義氏が、Rubyの20年を語りました。ネットに情報がない時代に日本で生まれたRubyが、世界各国でカンファレンス(RubyConf)が開催される程に知名度を広げるまでの歩みを振り返った後、高橋氏は「Rubyの歴史の"教科書"に載っている人が来ている。隣に座っているかもしれない。だが、あなたも歴史の一人である。皆で歴史をつくっていこう！」とコミュニティと愛を大切にするRubyのカンファレンスらしいメッセージで締めくくりました。

今回のRubyKaigiは高額なチケット料にも関わらずキャンセル待ち、平日である初日には予想を上回る参加者が動員した為、配布弁当の数が不足、立ち見のセッションが複数出る等、参加者のKaigiに対する強い意気込みが現れていまいした。


!! Rubyリファレンスマニュアル刷新計画 2013初夏 by okkez

Rubyリファレンスマニュアル(以下「るりま」)は2006年8月にプロジェクトが始まり、
doc.okkez.org / doc.ruby-lang.org で公開されています。
2011年9月に主要なクラス・モジュール・メソッドなどに最低限の説明が付いたが、
執筆対象1万7千の内、優先順位の低いTkやXML関係の1万ほどのエントリーが手付かずです。

okkezさんは前回RubyKaigi2011の時にも「るりま」に関する発表を行い、
当時から今までに、「るりま」のUTF-8化や「るりま」の開発ツールであるBitClustのgem化が行われました。

今後は「るりま」のリポジトリをGithubに移行、RDocとの連携を行い、
参加・継続のしやすい環境づくりをすることが目標です。

また、「るりま」はクリエイティブ・コモンズで公開されており、
「るりま」プロジェクト外でのプロダクトも複数存在する。例えば
yharaさんのprismdocというJarDoc風Webアプリケーションや
クリアーコードさんのrurima-searchという全文検索Webアプリなどがあります。

現在、「るりま」プロジェクトでは言語仕様のページを書く人がおらず、1.6-1.8の頃のものが使われており、執筆者を募集しています。

「るりま」はこれからgithubに移行され、みなさんの馴染み深いインターフェースで開発されていきます。これを機にみなさんも気軽に「るりま」を書いてpull requestしてみてはいかかでしょうか？

!! Ruby Kaja/ Community Appeal by 矢部 さん

rubykaigi 1日目の最後を飾るのは、RubyやRubyコミュニティに
貢献した若手のRubyistを讃える「Ruby Kaja」でした。

今回は、北は札幌、南は沖縄まで日本全国のRubyコミュニティ
がRuby Kajaに応募されていました。

Kajaの選出にはコミュニティ毎に基準が異なっていて、
コードをたくさん書いた人、コミュニティ内で使う
ツールを開発した人、司会進行をずっとしていた人と
コミュニティ毎に特色のある基準だと感じました。

また、各コミュニティの紹介では、
それぞれのコミュニティについての特色が紹介されていました。
例えば、Okinawa.rbではゲストハウスで活動していたり、
Shibuya.rbでは、駅に近いから通いやすいことをアピールしていました。

Kajaに選出された皆さん、おめでとうございます。
選出されたKajaの皆さんは、特典として来年のrubykaigiではKaja割が適用
されることになりました。

来年のRuby Kajaの開催は「未定」とのことですので、
来年も開催されることを期待したいと思います。


! May 31

! High Parformance Rails by Issei Naruta

RubyKaigi 2013 2日目のホールA。トップバッターは
日本のキッチンを支えるクックパッドのインフラやパフォーマンスの改善を担っている成田(@mirakui)さん。
その成田さんの経験から語られるRailsアプリケーションのパフォーマンスについての発表でした。


他の言語・フレームワークの組み合わせと比べ、決して高速とはいえないRailsですが
それでもクックパッドではRailsを採用し、サービスを運用しています。


この発表を通じてRailsのアプリケーションを高速化させるためにいくつかのコツを教えてもらいました。
- 極力Rubyに処理をさせないこと
- Rubyは極力新しいバージョンを使うこと


また、経験上特にRailsが遅いところはActiveRecordのオブジェクトを生成するところとRoutingの解決であると言います。
特にRoutingの話は会場を沸かせていました。


クックパッドのように大規模なWebアプリケーションになるとroutesが大きくなり、ルーティングのコストが上がってしまうとのことです。
この話を聞いて私も気になったので、測ってみたところ以下の順番で実行速度が速いことがわかりました。

  # config/routes.rb
  resouces :users
  
  url_for("/users")
  url_for(users_path)
  url_for(:users)
  url_for(controller: 'users', action: 'index')

他にもTemplate Engine(ERBやHamlなど)の話や、GCを止める話など
多くのRailsアプリケーションを作る人の役に立ちそうな話が目白押しでした。

成田さんはこのパフォーマンスを問題にRailsで開発することを諦めてはいけないと言っていました。
ちょっとした工夫で高速化ができるのでパフォーマンスに配慮したよいアプリケーションを作って行きたいですね!

ぜひRailsアプリケーションを作っている人はスライドや発表動画を御覧ください!
※スライドは発表当時より内容が増えているので、発表を聞いた方もぜひ御覧ください

! June 1

!! Rails Gems realize RESTful modeling patterns by Toru Kawamura

多くの人が使っているRailsはRESTfulな設計、開発ができるように開発されています。
そのRailsをよりRESTfulに扱うために7つのパターンを記載しているブログをもとにその中から、いくつか私達がよく使うパターンについて発表されました。

!! RailsはRESTfulである

RailsはRESTfulなフレームワークであると、DHHが7年前に言っていました。
RailsでどういうところがRESTfulであるかというと

  # config/routes.rb
  resources :users

と1行だけ書くことによってCRUDに必要なものが用意されることは、日頃からRailsでWebアプリケーションを書いている人はすぐにわかると思います。
このCRUDを表にすると以下のようになります。

||-||GET||POST||PUT||DELETE
| --- |--- |--- | --- | --- |
||/users||index||create||-||-
||/users/:id||show||-||update||destroy

!! RESTfulにするメリット

RESTfulな設計にすることでいくつかのメリットを享受することができます。

* 一貫性がとれる
* 簡単
* HTTPのメリットに乗れる

ということが言えます。
それはRailsでも同じで、同じことを開発者に強いるので理解がしやすく、設計をしても誰がやっても同じような設計ができあがります。
tkawaさんの発表の中で幾つかのRESTfulのパターンを紹介されていましたが、このレポートではその中から「認証」について紹介したいと思います。


認証をするときのURLやリソースはなんでしょうか？例えば、私達がよく認証機能を実装するときに使うDeviseをひとつの例としてみてみると

  GET    /users/sign_in devise/sessions#new
  POST   /users/sign_in devise/sessions#create
  DELETE /users/sign_in devise/sessions#destroy
  # snip


この例からDeviseはsessionに対してnewしたりcreateしていることがわかります。つまりsessionをリソースとしていみなしていて、ここで注目したいのは、実際にはsessionはモデルとしては存在しないし、データベースにも保存をしないようになっていません。


つまり単一のリソースに対してのCRUDなので、Railsで表現するならば

  # config/routes.rb
  resource :session

と書くことによって
||-||GET||POST||PUT||DELETE
| --- |--- |--- | --- | --- |
||/session||show||create||update||destroy

と、表現できます。なにをリソースとするのかを考えることによって、自然なURLが生成されましたね。

このあともtkawaさんはauthlogickやkaminariといった有名なGemがどういうRESTfulなパターンを持っているのかを紹介していました。

このように、RailsのRESTfulなパターンは他のGemを参考にすることで解決することが多いように思いました。認証の例でもありましたが、リソースの名付けが難しい場合時にはなにをリソースと見なすか？ということに焦点を当てるとRailsにおける開発の基本なのかもしれませんね。

このレポートで紹介しきれなかった他のパターンについては[[こちらのブログ|http://rest-pattern.hatenablog.com/]]で綴られています。[[tkawaさんのスライド|http://www.slideshare.net/tkawa1/rubykaigi2013-rails-gems-realize-restful-modeling-patterns]]と合わせて読んでみてはどうでしょう？


!! Be a library developer! by Kohei Stou

!!! 良いソフトウェア開発を知っている

須藤さんは発表中に「私たちは『良いソフトウェア』の開発の仕方をしっている」とし、
身近にあるコード(cairoというライブラリのコード)を例としてあげて説明をされていました。

  context.save
  context.circle(50, 50, 50)
  context.stroke
  context.restoke

この短いコードの中で``context.save``と``context.restore``に注目してみると

  context.save do
    context.circle(50, 50, 50)
    context.stroke
  end

上のようなかんじで書けると良いとお話されていました。
なぜ良いか、はそれがRuby-ish(Rubyぽい)からで、この書き方は他のライブラリにも同様に見られるからです。

!! Rubyぽい

「Rubyぽい」ことはつまり他と似ているということです。
似ているということは、一貫性があるということと、場合ごとに考えを変えなくても済むということ。
読みやすく一貫性があると、コードの本質に集中することができてメンテナンスがしやすくなります。

!! もう一歩踏み込んで

私たちがよく使うFileクラス、これもひとつの例を上げるなら

  # Setup
  file = File.open(path)
  file.read
  # Teardown
  file.close


  # Setup
  File.open(path) do |file|
    file.read
  end # Teardown

こう書くことができて、最初に出てきたcairoのコードも同じように扱うことができる。

Ruby-ishというのを他の言葉で伝えると「他と似ている」

Rubyぽい(Ruby-ish)コードについて話して居て、普段僕が書くコードがRubyぽいかどうかを再確認するような発表だった。


まつもとさんが「言語をつくると良いコードが書けるようになる」と言っていたが、須藤さんは「ライブラリをつくると良いコードがかけるようになる」と言っていたのが印象的でした。


須藤さんはリーダブルコードの巻末の文章を寄稿されていて、その内容を思い出しながら僕はこの発表を聞いていた。
今回の話はそのリーダブルコードに続く話だと思いながら聞いていた。

!! TRICK

参加者ブログに一番登場しているセッションとも言える、第一回のTRICKが開催されました。TRICKとは簡単に言うと自らがプログラミングにかける変態さをRubyで表現しあう大会です。


Rubyの生みの親のまつもとゆきひろさんを初めとする豪華な審査員が、応募作品をジャッジ、順位をつけていくのですが、作品の出来もさることながら、審査員同士のゆるい掛け合いが面白く、「俺が作った言語だよな？」「変態だーと思って次の作品見たら更に変態で…」「審査員が試されるコンテストだ」とコメントが飛び出すたびに会場は大いに盛り上がりました。また、受賞者の半分以上が審査員というのも笑いを誘ったひとつでありました。


優勝したのは @kinaba さん！満場一致の変態さだったようでした。また、受賞者には、変態の称号が与えられ、今回の記録はRuby公式レポジトリに半永的に刻まれることが発表されました。
次回開催には海外からの初応募を待っているとのこと！


※補足・注釈
TRICK…「Transcendental Ruby Imbroglio Contest for rubyKaigi (超絶技巧 Ruby 意味不明コンテスト in RubyKaigi)」の頭文字

! セッション以外のイベント

!! Rubyistを支えるランチ

!!! RubyKaigi 2013で配られた弁当

RubyKaig i2013のお昼は参加者全員に、通称「Heroku弁当」と呼ばれるお弁当が配られました。
今回はHerokuさんの協賛で1日約400食ものお弁当が用意されました。

ランチを摂る場所は、マイクロソフトさんが用意してくれたお座敷、会場の1階のベンチや2階にあったテラス、4階の会議室、中には外のベンチなど多くの場所で食べることができました。お昼の国際交流会館やそのまわりにはたくさんのRubyistがお弁当を食べていました。

http://www.flickr.com/photos/asonas/9173081863
(お座敷は大賑わい)
http://www.flickr.com/photos/asonas/9173112929
(外でお弁当を食べてるRubyist)

お弁当を配る場所は1日目はホワイエだけでしたが、とても混雑したため2日目からはホールAとホールBから配るようにしました。特にホールAは収容人数も多いことと、ホワイエに続く出口が2箇所あったので、机をそれぞれの出口の前に置くことで効率的に弁当をくばることができていました。

http://www.flickr.com/photos/asonas/9173793345
http://www.flickr.com/photos/asonas/9176620168
(混雑を考慮してお弁当を配る場所を2箇所に)

http://www.flickr.com/photos/asonas/9173078395
(Matzもお弁当を配っていました)

また、当日のサイネージには takoyakikamen ( https://twitter.com/takoyakikamen ) さんのつぶやき「イベントでいい弁当 ( https://twitter.com/takoyakikamen/status/339651045233938432 ) 」 が表示されていました。


http://www.flickr.com/photos/asonas/9176019118
(イベントでいい弁当)

!!! 追加のお弁当と最終日のカレー

初日はお弁当が足らなくて配られない人がいました。私もお弁当が配られなかったのですが、近くにロッテリアがあったりコンビニがあったりしたので特にお昼に困ることはありませんでした。

翌日からは追加のお弁当を注文することになり、いくつかの余ったお弁当は "More Lunch box" としておかわりができるほどでした。
最終日にはカレー弁当が配られました。私は初めて知ったのですが、いつのころからのRubyKaigiからか、スタッフの胃にやさしいとかでお昼にカレーが出る風習があり、2013でも最終日にカレー弁当が出てきました。


http://www.flickr.com/photos/asonas/9175949974
(You can have more Bento !!)

今回は会場がお台場ということもあり、お昼を食べる場所が会場から遠かったのですが、会場や会場の近くでお昼が食べられるようにお弁当を配ったのは大変よかったと思います。Rubyist同士の交流を深めるアクションとしてお昼の時間を活用できた人もいらっしゃったのではないでしょうか？

!! CodeIQ

会期限定でCodeIQさんより「あなたがRubyを好きな理由」をハッシュタグ #rubykaigi #codeiqをつけてつぶやこう！キャンペーンが開催され、審査員の心に響いたつぶやきが選ばれました！

@kakutani 賞！(当選者プレゼントにサイン付き！)　@suginoy さん
「Rubyコミュニティに顔を出すと、自分はもっと良いプログラマになろうと思うし、Rubyでコード書くと、もっと成長できると思わせてくれるところ」

Aaron 賞！@nay3 さん
「Rubyを好きな理由は、自由なところ。読めば読める。やればできる。」

@yukihiro_matz 賞！@berobero11 さん
「コアの開発者陣が日本人らしく、とても些細（に見えるよう）なことを延々と議論して作りあげているところ。この細かさがあの使いやすさを生んでいるのだと思います。」

応募者全体のつぶやきには「楽しい」「使いやすい」「コミュニティ」というキーワードが頻出し、Rubyの「人間が気持ちよく書ける言語」というコンセプトを皆が感じ、結果、コミュニティが活発になっている様子が見てとれました。


! 最後に

TODO
