! RubyKaigi 2013 レポート

!! 開催概要

:開催日: 2013 年 5 月 30 日 (木) 10:00 〜 2013 年 6 月 1 日 (土) 18:30
:開催場所: 東京国際交流館 プラザ平成
:主催: RubyKaigi 2013 実行委員会
:公式ページ: http://rubykaigi.org/2013
:公式ハッシュタグ: #rubykaigi

!! はじめに

RubyKaigi が 2011 年 7 月に終わってから、2 年弱の充電期間を経て、新たな RubyKaigi として帰ってきました。
これまでの RubyKaigi とは異なる RubyKaigi 2013。準国際カンファレンスとして蘇り、新たな試みが多かったRubyKaigi 2013。
今回のレポートは、そんな RubyKaigi 2013 の様子を一部ではありますが、お伝えします。

! May 30

!! The History of Ruby; 20th Anniversary Ed. by 高橋 征義 さん

日本 Ruby の会 会長 高橋征義氏が、Ruby の 20 年を語りました。ネットに情報がない時代に日本で生まれた Ruby が、世界各国でカンファレンス (RubyConf) が開催される程に知名度を広げるまでの歩みを振り返った後、高橋氏は「Ruby の歴史の "教科書" に載っている人が来ている。隣に座っているかもしれない。だが、あなたも歴史の一人である。皆で歴史をつくっていこう！」とコミュニティと愛を大切にする Ruby のカンファレンスらしいメッセージで締めくくりました。

今回の RubyKaigi 2013 は高額なチケット料にも関わらずキャンセル待ち、平日である初日には予想を上回る参加者が動員した為、配布弁当の数が不足、立ち見のセッションが複数出る等、参加者の RubyKaigi に対する強い意気込みが現れていまいした。


!! Ruby リファレンスマニュアル刷新計画 2013 初夏 by okkez さん

Ruby リファレンスマニュアル (以下るりま) は 2006 年 8 月にプロジェクトが始まり、doc.okkez.net / doc.ruby-lang.org で公開されています。
2011 年 9 月に主要なクラス・モジュール・メソッドなどに最低限の説明が付きましたが、執筆対象 17000 の内、優先順位の低い Tk や XML 関係の 10000 ほどのエントリーがまだ手付かずの状態なのだそうです。

okkez さんは前回の RubyKaigi 2011 の時にもるりまに関する発表を行われていますが、当時設定した目標をるりまプロジェクトは着実に進め、るりまの UTF-8 化やるりまを利用するツールである BitClust の gem 化などを行ってきたそうです。
今後はるりまのリポジトリを Github に移行し、参加・継続のしやすい環境づくりをすること、また、RDoc との連携が目標です。(RubyKaigi 2013の後、早速 Github に公開されました！)

また、るりまはクリエイティブ・コモンズで公開されており、るりまプロジェクト外でのプロダクトも複数存在します。例えば、 yhara さんの prismdoc という JarDoc 風 Web アプリケーションやクリアーコードさんの rurima-search という全文検索 Web アプリなどがあります。

現在、るりまプロジェクトでは言語仕様のページを書く人がおらず、1.6 - 1.8 の頃のものがまだ使われており、随時執筆者を募集中です。
るりまはすでに Github に移行され、みなさんに馴染み深いインターフェースでの開発が始まっています。これを機にみなさんも気軽にるりまに pull request してみてはいかかでしょうか？

私はまだまだひよっこ Rubyist ですが、普段 XML ライブラリの rexml を使ってコードを書くことが多いので、ドキュメントを書いて pull request してみたいなと思いました。
常に進化し続ける Ruby に対して、ドキュメントがすぐに追いつくのは難しいとは思いますが、これからどんどん増えていくであろうドキュメントに期待したいです。


!! Ruby Kaja / Community Appeal by 矢部 さん

RubyKaigi 2013 の 1日目の最後を飾ったのは、Ruby や Ruby コミュニティに貢献した若手の Rubyist を讃える「Ruby Kaja」でした。
今回は、北は札幌、南は沖縄まで日本全国の Ruby コミュニティが Ruby Kaja に応募されていました。

Kaja の選出にはコミュニティ毎に基準が異なっていて、コードをたくさん書いた人、コミュニティ内で使うツールを開発した人、司会進行をずっとしていた人とコミュニティ毎に特色のある基準だと感じました。

また、各コミュニティの紹介では、それぞれのコミュニティの特色が紹介されていました。
例えば、Okinawa.rb ではゲストハウスで活動していたり、Shibuya.rb では、駅に近いから通いやすいことをアピールしたりしていました。

Kaja に選出された皆さん、おめでとうございます。選出された Kaja の皆さんには、特典として来年の RubyKaigi 2014 のチケット争奪戦では Kaja 割が適用されるそうです。

来年の Ruby Kaja の開催は「未定」とのことですが、来年も開催されることを期待したいと思います。


! May 31

!! High Parformance Rails by 成田 さん

RubyKaigi 2013 2 日目のホール A。トップバッターは、日本のキッチンを支えるクックパッドのインフラやパフォーマンスの改善を担っている成田 (@mirakui) さん。
その成田さんの経験から語られる Rails アプリケーションのパフォーマンスについての発表でした。

他の言語・フレームワークの組み合わせと比べ、決して高速とはいえない Rails ですが、それでもクックパッドでは開発の容易さから Rails を採用し、サービスを運用しています。

この発表を通じて Rails のアプリケーションを高速化させる２つのコツを教わりました。
- 極力 Ruby に処理をさせないこと
- Ruby は極力新しいバージョンを使うこと

成田さん曰く、経験上特に Rails が遅いところは ActiveRecord のオブジェクトを生成するところと Routing の解決であると言います。
特に Routing の話は会場を沸かせていました。

クックパッドのように大規模な Web アプリケーションになると routes が大きくなり、ルーティングのコストが上がってしまうとのことです。
この話を聞いて私も気になったので、自分で計測してみたところ以下の順番で実行速度が速いことがわかりました。

  # config/routes.rb
  resouces :users
  
  url_for("/users")
  url_for(users_path)
  url_for(:users)
  url_for(controller: 'users', action: 'index')

他にも Template Engine (ERB や Haml など)についての話や、GC を止める話など、多くの Rails アプリケーションを作る人の役に立ちそうな話が目白押しでした。

成田さんはこのパフォーマンスを問題に Rails で開発することを諦めてはいけないと言っていました。
ちょっとした工夫で高速化ができるのでパフォーマンスに配慮したよいアプリケーションを作って行きたいですね!

ぜひ Rails アプリケーションを作っている人はスライドや発表動画を御覧ください!
※スライドは発表当時より内容が増えているので、発表を聞いた方もぜひ御覧ください


! June 1

!! Rails Gems realize RESTful modeling patterns by Toru Kawamura さん

多くの人が使っている Rails は RESTful な設計、開発ができるように開発されています。
その Rails をより RESTful に扱うために 7 つのパターンを記載しているブログ(http://rest-pattern.hatenablog.com/entry/contents)をもとに、その中からいくつか私達がよく使うパターンについて発表されました。

!!! Rails は RESTful である

Rails は RESTful なフレームワークであると、DHH が 7 年前に言っていました。
Rails でどういうところが RESTful であるかというと

  # config/routes.rb
  resources :users

と 1 行だけ書くことによって CRUD に必要なものが用意されることは、日頃から Rails で Web アプリケーションを書いている人はすぐにわかると思います。
この CRUD を表にすると以下のようになります。

||-||GET||POST||PUT||DELETE
||/users||index||create||-||-
||/users/:id||show||-||update||destroy

!!! RESTful にするメリット

RESTful な設計にすることでいくつかのメリットを享受することができます。

* 一貫性がとれる
* 簡単
* HTTP のメリットに乗れる

ということが言えます。
それは Rails でも同じで、同じことを開発者に強いるので理解がしやすく、設計をしても誰がやっても同じような設計ができあがります。
tkawa さんの発表の中で幾つかの RESTful のパターンを紹介されていましたが、このレポートではその中から「認証」について紹介したいと思います。

認証をするときの URL やリソースはなんでしょうか？例えば、私達がよく認証機能を実装するときに使う Devise をひとつの例としてみてみると

  GET    /users/sign_in devise/sessions#new
  POST   /users/sign_in devise/sessions#create
  DELETE /users/sign_in devise/sessions#destroy
  # snip


この例から Devise は session に対して new したり create していることがわかります。ここで注目したいのは、実際には session はモデルとしては存在しないし、データベースにも保存をするようにはなっていませんが、session をリソースとみなしているということです。


つまり単一のリソースに対しての CRUD なので、Rails で表現するならば

  # config/routes.rb
  resource :session

と書くことによって
||-||GET||POST||PUT||DELETE
||/session||show||create||update||destroy

と、表現できます。なにをリソースとするのかを考えることによって、自然な URL が生成されましたね。

このあとも tkawa さんは authlogic や kaminari といった有名な Gem がどういう RESTful なパターンを持っているのかを紹介していました。

このように、Rails の RESTful なパターンは他の Gem を参考にすることで解決することが多いように思いました。認証の例でもありましたが、リソースの名付けが難しい場合時にはなにをリソースと見なすか？ということに焦点を当てることが Rails における開発の基本なのかもしれませんね。

このレポートで紹介しきれなかった他のパターンについては[[こちらのブログ|http://rest-pattern.hatenablog.com/]]で綴られています。[[tkawa さんのスライド|http://www.slideshare.net/tkawa1/rubykaigi2013-rails-gems-realize-restful-modeling-patterns]]と合わせて読んでみてはどうでしょう？


!! Be a library developer! by Kohei Stou さん

!!! 良いソフトウェア開発を知っている

須藤さんは発表中に「私たちは『良いソフトウェア』の開発の仕方をしっている」とし、身近にあるコード(cairo というライブラリのコード)を例としてあげて説明をされていました。

  context.save
  context.circle(50, 50, 50)
  context.stroke
  context.restoke

この短いコードの中で ``context.save`` と ``context.restore`` に注目してみると

  context.save do
    context.circle(50, 50, 50)
    context.stroke
  end

上のようなかんじで書けると良いとお話されていました。
なぜ良いか、はそれが Ruby-ish (Ruby ぽい) からで、この書き方は他のライブラリにも同様に見られるからです。

!!! Ruby ぽい

「Ruby ぽい」ことはつまり他と似ているということです。
似ているということは、一貫性があるということと、場面ごとに考えを変えなくても済むということ。
読みやすく一貫性があると、コードの本質に集中することができてメンテナンスがしやすくなります。

!!! もう一歩踏み込んで

私たちがよく使う File クラス、これもひとつの例を上げるなら

  # Setup
  file = File.open(path)
  file.read
  # Teardown
  file.close


  # Setup
  File.open(path) do |file|
    file.read
  end # Teardown

こう書くことができて、最初に出てきた cairo のコードも同じように扱うことができます。

須藤さんの発表は、Ruby ぽい (Ruby-ish) コードについて問いかけていて、普段僕が書くコードが Ruby ぽいかどうかを再確認するような発表でした。
まつもとさんが「言語をつくると良いコードが書けるようになる」と言っていたが、須藤さんは「ライブラリをつくると良いコードがかけるようになる」と言っていたのが印象的でした。


!! TRICK

参加者ブログに一番登場しているセッションとも言える、第一回の TRICK が開催されました。TRICK とは簡単に言うと自らがプログラミングにかける変態さを Ruby で表現しあう大会です。

Ruby の生みの親のまつもとゆきひろさんを初めとする豪華な審査員が、応募作品をジャッジ、順位をつけていくのですが、作品の出来もさることながら、審査員同士のゆるい掛け合いが面白く、「俺が作った言語だよな？」「変態だーと思って次の作品見たら更に変態で……」「審査員が試されるコンテストだ」とコメントが飛び出すたびに会場は大いに盛り上がりました。また、受賞者の半分以上が審査員というのも笑いを誘ったひとつでありました。


優勝したのは @kinaba さん！満場一致の変態さだったようでした。また、受賞者には、変態の称号が与えられ、今回の記録は Ruby 公式レポジトリに半永的に刻まれることが発表されました。
次回開催には海外からの初応募を待っているとのこと！


※補足・注釈
TRICK…「Transcendental Ruby Imbroglio Contest for rubyKaigi (超絶技巧 Ruby 意味不明コンテスト in RubyKaigi)」の頭文字

! セッション以外のイベント

!! Rubyist を支えるランチ

!!! RubyKaigi 2013 で配られた弁当

RubyKaigi 2013 のお昼は参加者全員に、通称「Heroku 弁当」と呼ばれるお弁当が配られました。
今回は Heroku さんの協賛で1日約 400 食ものお弁当が用意されました。

ランチを摂る場所は、マイクロソフトさんが用意してくれたお座敷、会場の 1 階のベンチや 2 階にあったテラス、4 階の会議室、中には外のベンチなど多くの場所で食べることができました。お昼の国際交流会館やそのまわりにはたくさんの Rubyist がお弁当を食べていました。

http://www.flickr.com/photos/asonas/9173081863
(お座敷は大賑わい)
http://www.flickr.com/photos/asonas/9173112929
(外でお弁当を食べてるRubyist)

お弁当を配る場所は 1 日目はホワイエだけでしたが、とても混雑したため 2 日目からはホール A とホール B から配るようにしました。特にホール A は収容人数も多いことと、ホワイエに続く出口が 2 箇所あったので、机をそれぞれの出口の前に置くことで効率的に弁当をくばることができていました。

http://www.flickr.com/photos/asonas/9173793345
http://www.flickr.com/photos/asonas/9176620168
(混雑を考慮してお弁当を配る場所を2箇所に)

http://www.flickr.com/photos/asonas/9173078395
(Matzもお弁当を配っていました)

また、当日のサイネージには takoyakikamen ( https://twitter.com/takoyakikamen ) さんのつぶやき「イベントでいい弁当 ( https://twitter.com/takoyakikamen/status/339651045233938432 ) 」 が表示されていました。


http://www.flickr.com/photos/asonas/9176019118
(イベントでいい弁当)

!!! 追加のお弁当と最終日のカレー

初日はお弁当が足らなくて配られない人がいましたが、翌日からは追加のお弁当を注文することになり、いくつかの余ったお弁当は "More Lunch box" としておかわりができるほどでした。
最終日にはカレー弁当が配られました。私は初めて知ったのですが、いつのころからの RubyKaigi からか、スタッフの胃にやさしいとかでお昼にカレーが出る風習があり、RubyKaigi 2013 でも最終日にカレー弁当が出てきました。


http://www.flickr.com/photos/asonas/9175949974
(You can have more Bento !!)

今回は会場がお台場ということもあり、お昼を食べる場所が会場から遠かったのですが、会場や会場の近くでお昼が食べられるようにお弁当を配ったのは大変よかったと思います。Rubyist 同士の交流を深めるアクションとしてお昼の時間を活用できた人もいらっしゃったのではないでしょうか？

!! CodeIQ

会期限定で CodeIQ さんより「あなたが Ruby を好きな理由」をハッシュタグ #rubykaigi #codeiq をつけてつぶやこう！キャンペーンが開催され、審査員の心に響いたつぶやきが選ばれました！

@kakutani 賞！(当選者プレゼントにサイン付き！) @suginoy さん
「Ruby コミュニティに顔を出すと、自分はもっと良いプログラマになろうと思うし、Ruby でコード書くと、もっと成長できると思わせてくれるところ」

Aaron 賞！@nay3 さん
「Ruby を好きな理由は、自由なところ。読めば読める。やればできる。」

@yukihiro_matz 賞！@berobero11 さん
「コアの開発者陣が日本人らしく、とても些細（に見えるよう）なことを延々と議論して作りあげているところ。この細かさがあの使いやすさを生んでいるのだと思います。」

応募者全体のつぶやきには「楽しい」「使いやすい」「コミュニティ」というキーワードが頻出し、Ruby の「人間が気持ちよく書ける言語」というコンセプトを皆が感じ、結果、コミュニティが活発になっている様子が見てとれました。


! 最後に

TODO
